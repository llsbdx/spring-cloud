一个系统，进行拆分之后，会有多个微服务，那么这些微服务相互可以调用，因此就需要一个服务注册与发现机制，让大家相互能够看到对方，这时候，我们就需要Eureka对这些服务进行管理。

当看到对方之后，我们还需要一个正确的调用方法，Feign的作用实际上就是包装了HTTPClient请求，让我们直接通过接口定义就能够通过HTTP协议请求到数据。

而Ribbon则比较简单，他的作用是做一个软负载均衡，我们在这里可以不深入的讨论它。

比较复杂的Hystrix，它的作用是保证程序在错误的时候做出最正确的反应，例如上图，我们看到当一个微服务在调用多个微服务的时候，有可能会因为其中某个服务的错误返回导致整个数据链中断，
那么Hystrix的作用就是当某个微服务发生错误的时候，启动熔断机制，注意，我们在这里再读一遍熔断这个词，熔断来源于生活中的保险丝概念，当过载的时候，保险丝会熔断以保证电器安全。
而Hystrix的熔断机制意思是，当一个微服务调用了多个微服务的时候，多的一方有一个微服务发生了过载导致响应非常缓慢，那么我们就需要赶紧调用备选方案而不是一直在那里等待。


